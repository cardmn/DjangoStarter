---
description: 
globs: 
alwaysApply: false
---
---
description: Python代码规范
globs: **/*.py
alwaysApply: false
---
# Python代码规范

## 版本要求
- 使用Python 3.11
- 使用PDM管理依赖

## 代码风格
- 遵循PEP 8规范
- 使用4个空格缩进，不使用Tab
- 行长度限制在120字符以内
- 类和函数间隔两行，方法间隔一行
- 使用Google风格的文档字符串

## 命名约定
- 类名使用CamelCase(驼峰命名)：`MyClass`
- 函数和变量使用snake_case(蛇形命名)：`my_function`, `my_variable`
- 常量使用全大写：`MY_CONSTANT`
- 私有属性和方法使用单下划线前缀：`_private_method`
- 使用有意义的描述性名称

## 导入规范
- 按以下顺序组织导入：
  1. 标准库导入
  2. 相关第三方库导入 
  3. 本地应用/库导入
- 每组之间用一个空行分隔
- 在每个组内按字母顺序排列

## 类型提示
- 使用Python类型注解，特别是在API和公共接口上
- 复杂类型使用`typing`模块
- 使用类型注解有助于django-ninja自动生成API文档

## Django模型规范
- 每个模型字段必须有`verbose_name`
- 实现`__str__`方法便于在管理界面中显示
- 定义`Meta`内部类，至少包含`verbose_name`和`verbose_name_plural`
- 外键和多对多字段明确指定`on_delete`行为
- 按照功能对字段进行分组和排序

## 注释规范
- 注释应解释"为什么"而不是"是什么"
- 复杂逻辑必须有注释说明
- 使用TODO、FIXME等标记临时或有问题的代码
- 业务关键逻辑必须有详细注释

## 异常处理
- 明确指定捕获的异常类型，避免使用裸except
- 异常信息应当明确、具体
- 记录异常详情，包括上下文信息
- 避免在异常处理中的空pass语句，至少要记录日志

## 测试规范
- 使用pytest编写测试
- 每个功能点至少有一个测试用例
- 使用工厂模式创建测试数据
- 测试应保持独立，不相互依赖
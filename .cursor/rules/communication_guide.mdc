---
description: 
globs: 
alwaysApply: false
---
---
description: 设计与开发沟通指南
globs: 
alwaysApply: false
---
# 设计与开发沟通指南

本文档定义了从页面设计到代码实现的完整沟通流程，旨在确保设计与开发过程的顺畅协作。

## 沟通流程概述

### 1. 需求明确阶段
- **用户提供**: 功能需求、参考示例、目标用户、关键功能点
- **AI提供**: 功能分析、关键考虑点、可行性评估

### 2. 页面设计阶段
- **用户提供**: 设计偏好、品牌要素(颜色、字体等)
- **AI提供**: 页面结构建议、UI组件推荐、关键交互描述

### 3. 设计确认阶段
- **用户确认**: 页面结构、组件选择、交互方式
- **AI提供**: 详细的设计规范(颜色代码、间距、字体大小等)

### 4. 代码实现阶段
- **AI提供**: 实现方案、代码片段、API集成建议

### 5. 测试与优化阶段
- **用户提供**: 测试反馈
- **AI提供**: 优化建议和代码调整

## MDC文件引用指南

为确保沟通精准，请在交流中明确引用相关MDC规范文件。

### 通用引用格式

当需要引用MDC文件中的规范时，使用以下格式:
```
@[mdc文件名]:[部分]:[具体规则]
```

例如:
```
@ui_design:颜色系统:主色
@mobile_ux:表单设计:分步表单
```

### 各MDC文件使用指南

#### 1. ui_design.mdc - UI设计规范

**适用场景**: 讨论页面视觉设计、组件选择、色彩方案

**引用示例**:
- `@ui_design:颜色系统` - 讨论色彩方案
- `@ui_design:排版系统:字体大小` - 确定文本尺寸
- `@ui_design:组件设计:按钮` - 讨论按钮样式

**使用样例**:
> "我需要设计一个突出显示的按钮，应该遵循 @ui_design:组件设计:按钮 中的主要按钮规范，使用 @ui_design:颜色系统:主色 作为背景色。"

#### 2. mobile_ux.mdc - 移动端用户体验规范

**适用场景**: 讨论移动端交互体验、页面结构、加载策略

**引用示例**:
- `@mobile_ux:页面布局:页面架构` - 确定整体结构
- `@mobile_ux:手势与交互` - 讨论触控交互
- `@mobile_ux:小程序特殊考虑` - 针对小程序的特殊处理

**使用样例**:
> "这个列表页需要遵循 @mobile_ux:加载与状态:加载状态 中的骨架屏设计，并实现 @mobile_ux:手势与交互 中提到的下拉刷新功能。"

#### 3. project_structure.mdc - 项目结构规范

**适用场景**: 讨论代码文件组织、命名规范、目录结构

**引用示例**:
- `@project_structure:目录结构` - 讨论文件放置位置
- `@project_structure:命名规范` - 确定文件命名方式

**使用样例**:
> "新创建的账户组件应该按照 @project_structure:应用结构规范 放在适当的目录中，并遵循 @project_structure:命名规范 命名文件。"

#### 4. api.mdc - API开发规范

**适用场景**: 讨论后端API设计、接口格式、认证方式

**引用示例**:
- `@api:响应格式规范` - 讨论API返回格式
- `@api:API路径设计` - 确定接口URL结构

**使用样例**:
> "账户信息接口需要遵循 @api:响应格式规范 返回数据，并按照 @api:认证与权限 实施JWT认证保护。"

#### 5. model.mdc - 模型设计规范

**适用场景**: 讨论数据库模型设计、字段类型、关系定义

**引用示例**:
- `@model:模型定义规范` - 讨论模型类设计
- `@model:字段命名规范` - 确定字段命名方式

**使用样例**:
> "账户模型应遵循 @model:模型定义规范 设计，并为敏感字段如密码采用 @model:字段类型选择 中推荐的适当类型。"

#### 6. code_generator.mdc - 代码生成器使用规范

**适用场景**: 讨论使用代码生成器自动创建业务代码

**引用示例**:
- `@code_generator:使用流程` - 讨论代码生成步骤
- `@code_generator:模型设计要求` - 确保模型设计兼容代码生成

**使用样例**:
> "完成模型设计后，我们可以按照 @code_generator:使用流程 生成基础CRUD代码，然后再根据需要扩展特殊功能。"

## 设计与开发交互示例

下面是一个完整的交互示例，展示如何使用本指南进行沟通:

### 阶段1: 需求明确

**用户**:
> "我需要开发一个银行账户信息显示页面，要求显示账号(部分隐藏)、余额、最近5笔交易记录，并支持复制账号功能。目标用户是移动端客户，要求界面简洁可信赖。"

**AI**:
> "了解您的需求。这个账户信息页面将包含以下核心功能:
> 1. 显示部分隐藏的账号(安全考虑)
> 2. 显示当前余额
> 3. 展示最近5笔交易记录
> 4. 提供账号复制功能
>
> 考虑到移动端用户，我们需要注意 @mobile_ux:基本原则:易用性优先，确保操作简便直观。同时遵循 @ui_design:设计理念:简约至上 原则，打造简洁可信赖的界面。"

### 阶段2: 页面设计

**用户**:
> "我希望使用蓝色和白色为主，体现银行的专业和安全感。ShadeUI组件库看起来不错，可以考虑使用。"

**AI**:
> "基于您的偏好，我推荐以下设计方案:
>
> **页面结构**:
> 根据 @mobile_ux:页面布局:页面架构，采用以下结构:
> - 顶部: 银行logo + 用户名
> - 中部: 账户信息卡片(账号和余额)
> - 底部: 最近交易记录列表
>
> **色彩方案**:
> 遵循 @ui_design:颜色系统，使用:
> - 主色: #0052cc (专业蓝)
> - 背景色: #ffffff (纯白色)
> - 辅助色: #f5f7fa (浅灰背景)
>
> **组件选择**:
> 优先使用 @ui_design:推荐的Tailwind CSS组件库:ShadeUI，具体组件:
> - ShadeUI的Card组件展示账户信息
> - ShadeUI的Table组件展示交易记录
> - ShadeUI的Button组件实现复制功能"

### 阶段3: 设计确认

**用户**:
> "设计方案看起来不错，但我想确认一下交易记录是用表格还是列表形式更合适？"

**AI**:
> "考虑到 @mobile_ux:数据展示:列表与网格 中的建议，在移动端环境下，列表形式通常比表格更适合:
>
> 1. 列表形式更适合垂直滚动浏览
> 2. 每条交易记录可以包含更丰富的信息和操作
> 3. 可以使用ShadeUI的List组件，适配不同屏幕尺寸
>
> 建议每条交易记录包含:
> - 左侧: 交易类型图标
> - 中部: 交易描述和日期
> - 右侧: 交易金额(收入绿色，支出红色)
>
> 这样设计既符合 @ui_design:组件设计 的原则，又满足 @mobile_ux:内容呈现 的要求。"

### 阶段4: 代码实现

**用户**:
> "列表形式听起来更合适。现在可以开始实现代码了。"

**AI**:
> "我们将基于DjangoStarter框架实现这个功能。根据 @project_structure:应用结构规范，我们需要:
>
> 1. 在`src/apps/`下创建账户应用
> 2. 设计账户和交易记录模型
> 3. 使用django-ninja创建API端点
> 4. 创建前端模板
>
> 下面是具体实现步骤..."

## 沟通最佳实践

1. **明确阶段**: 在每次交流中明确当前处于哪个阶段，避免跨阶段讨论造成混乱

2. **准确引用**: 使用@符号精确引用相关规范，确保双方理解一致

3. **逐步确认**: 每个阶段结束前确认已达成共识，再进入下一阶段

4. **反馈循环**: 及时提供反馈，允许在必要时回退到前一阶段调整

5. **文档记录**: 保存关键决策点和设计选择，便于日后参考